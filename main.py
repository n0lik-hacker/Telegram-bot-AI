# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫
import openai
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
import config

openai.api_key = config.OPENAI_TOKEN
token = config.TOKEN

bot = Bot(token)
dp = Dispatcher(bot)


@dp.message_handler(commands=["start"])  # –§—É–Ω–∫—Ü–∏—è, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∞—è –∫–æ–º–∞–Ω–¥—É /start
async def welcome(message: types.Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!‚úãüèª\n–Ø –±–æ—Ç –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å –¥–æ–º–∞—à–Ω–∏–º –∑–∞–¥–∞–Ω–∏–µ–º!\n–ë–ª–∞–≥–æ–¥–∞—Ä—è –º–Ω–µ, –≤—ã —Å–º–æ–∂–µ—Ç–µ —Ä–µ—à–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∑–∞–¥–∞—á–∏!")
    await message.answer(
        "–ú–æ–∂–µ—à—å –ø—Ä–∏—Å—ã–ª–∞—Ç—å –∑–∞–¥–∞—á—É –∏ —è –µ–µ —Ä–µ—à—É)")


@dp.message_handler()  # –§—É–Ω–∫—Ü–∏—è - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç AI
async def gpt_answer(message: types.Message):
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "user", "content": message.text},
        ]
    )

    await message.answer(response["choices"][0]["message"]["content"])


if __name__ == "__main__":  # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    executor.start_polling(dp, skip_updates=True)
